{"version":3,"sources":["types/SortType.ts","components/GoodsList/GoodsList.tsx","App.tsx","index.tsx"],"names":["SortType","GoodsList","goods","sortType","isReversed","visibleGoods","sort","a","b","ALPHABET","localeCompare","LENGTH","length","NONE","Error","reverse","map","good","goodsFromServer","App","useState","setSortType","setReversed","isModified","className","type","classNames","onClick","currentReversed","ReactDOM","render","document","getElementById"],"mappings":"6KAAYA,E,sEAAAA,O,eAAAA,I,uBAAAA,I,oBAAAA,M,uBCSCC,EAA6B,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,SAAUC,EAAiB,EAAjBA,WACtDC,EAAY,YAAOH,GAsBzB,OApBAG,EAAaC,MAAK,SAACC,EAAGC,GACpB,OAAQL,GACN,KAAKH,EAASS,SACZ,OAAOF,EAAEG,cAAcF,GAEzB,KAAKR,EAASW,OACZ,OAAOJ,EAAEK,OAASJ,EAAEI,OAEtB,KAAKZ,EAASa,KACZ,OAAO,EAET,QACE,MAAM,IAAIC,MAAM,yBAIlBV,GACFC,EAAaU,UAIb,6BACE,mCACGV,EAAaW,KAAI,SAACC,GAAD,OAChB,oBACE,UAAQ,OADV,SAIGA,GAFIA,WC/BJC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAGWC,EAAgB,WAC3B,MAAgCC,mBAAmBpB,EAASa,MAA5D,mBAAOV,EAAP,KAAiBkB,EAAjB,KACA,EAAkCD,oBAAS,GAA3C,mBAAOhB,EAAP,KAAmBkB,EAAnB,KACMC,EAAapB,IAAaH,EAASa,MAAQT,EAWjD,OACE,sBAAKoB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,kBACA,CACE,WAAYvB,IAAaH,EAASS,WAGtCkB,QAAS,WACPN,EAAYrB,EAASS,WATzB,iCAeA,wBACEgB,KAAK,SACLD,UAAWE,IACT,qBACA,CACE,WAAYvB,IAAaH,EAASW,SAGtCgB,QAAS,WACPN,EAAYrB,EAASW,SATzB,4BAeA,wBACEc,KAAK,SACLD,UAAWE,IACT,oBACA,CACE,YAAatB,IAGjBuB,QAlDY,WAClBL,GAAY,SAACM,GAAD,OAAsBA,MAyC9B,qBAaCL,GACC,wBACEE,KAAK,SACLD,UAAU,4BACVG,QAvDQ,WAChBN,EAAYrB,EAASa,MACrBS,GAAY,IAkDN,sBAUJ,cAAC,EAAD,CACEpB,MAAOgB,EACPf,SAAUA,EACVC,WAAYA,QC3FpByB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.a7248ba9.chunk.js","sourcesContent":["export enum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n","import React from 'react';\nimport { SortType } from '../../types/SortType';\n\ntype Props = {\n  goods: string[],\n  sortType: SortType,\n  isReversed: boolean,\n};\n\nexport const GoodsList: React.FC<Props> = ({ goods, sortType, isReversed }) => {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((a, b) => {\n    switch (sortType) {\n      case SortType.ALPHABET:\n        return a.localeCompare(b);\n\n      case SortType.LENGTH:\n        return a.length - b.length;\n\n      case SortType.NONE:\n        return 0;\n\n      default:\n        throw new Error('Invalid sort type');\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return (\n    <ul>\n      <>\n        {visibleGoods.map((good) => (\n          <li\n            data-cy=\"Good\"\n            key={good}\n          >\n            {good}\n          </li>\n        ))}\n      </>\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\nimport { SortType } from './types/SortType';\nimport { GoodsList } from './components/GoodsList';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.NONE);\n  const [isReversed, setReversed] = useState(false);\n  const isModified = sortType !== SortType.NONE || isReversed;\n\n  const reverseList = () => {\n    setReversed((currentReversed) => !currentReversed);\n  };\n\n  const resetList = () => {\n    setSortType(SortType.NONE);\n    setReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-info ',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          onClick={() => {\n            setSortType(SortType.ALPHABET);\n          }}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-success ',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={() => {\n            setSortType(SortType.LENGTH);\n          }}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={reverseList}\n        >\n          Reverse\n        </button>\n\n        {isModified && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={resetList}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <GoodsList\n        goods={goodsFromServer}\n        sortType={sortType}\n        isReversed={isReversed}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}